generation.generator
====================

.. py:module:: generation.generator


Classes
-------

.. autoapisummary::

   generation.generator.LLMGenerator


Module Contents
---------------

.. py:class:: LLMGenerator(model: transformers.AutoModelForCausalLM, model_config: utils.configs.ModelConfig)

   Bases: :py:obj:`torch.nn.Module`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: generator


   .. py:attribute:: tokenizer


   .. py:attribute:: device


   .. py:attribute:: gen_params


   .. py:method:: forward(samples: list, batch_size: int = 1, watermarking_scheme: Optional[watermark.auto_watermark.AutoWatermark] = None) -> list[str]

      Takes a list of input contexts and generates text using the model.

      Parameters:
          samples: list
              A list of input contexts for text generation.
          batch_size: int
              The batch size to use for generation.
          watermarking_scheme: LogitsProcessor
              The watermarking scheme to use for generation.



   .. py:method:: forward_debug(samples: list, batch_size: int = 1, watermarking_scheme: Optional[watermark.auto_watermark.AutoWatermark] = None) -> list[str]

      Takes a list of input contexts and generates text using the model.

      Parameters:
          samples: list
              A list of input contexts for text generation.
          batch_size: int
              The batch size to use for generation.
          watermarking_scheme: LogitsProcessor
              The watermarking scheme to use for generation.



